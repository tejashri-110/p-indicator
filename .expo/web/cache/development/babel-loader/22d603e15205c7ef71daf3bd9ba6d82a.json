{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.provideDocumentReferenceClass = provideDocumentReferenceClass;\nexports.provideFieldValueClass = provideFieldValueClass;\nexports.buildNativeMap = buildNativeMap;\nexports.buildNativeArray = buildNativeArray;\nexports.generateNativeData = generateNativeData;\nexports.parseNativeMap = parseNativeMap;\nexports.parseNativeArray = parseNativeArray;\nexports.parseNativeData = parseNativeData;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _common = require(\"@react-native-firebase/app/lib/common\");\n\nvar _FirestoreBlob = _interopRequireDefault(require(\"../FirestoreBlob\"));\n\nvar _FirestoreFieldPath = require(\"../FirestoreFieldPath\");\n\nvar _FirestoreGeoPoint = _interopRequireDefault(require(\"../FirestoreGeoPoint\"));\n\nvar _FirestorePath = _interopRequireDefault(require(\"../FirestorePath\"));\n\nvar _FirestoreTimestamp = _interopRequireDefault(require(\"../FirestoreTimestamp\"));\n\nvar _typemap = require(\"./typemap\");\n\nvar FirestoreDocumentReference = null;\n\nfunction provideDocumentReferenceClass(documentReference) {\n  FirestoreDocumentReference = documentReference;\n}\n\nvar FirestoreFieldValue = null;\n\nfunction provideFieldValueClass(fieldValue) {\n  FirestoreFieldValue = fieldValue;\n}\n\nfunction buildNativeMap(data) {\n  var nativeData = {};\n\n  if (data) {\n    var keys = Object.keys(data);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var typeMap = generateNativeData(data[key]);\n\n      if (typeMap) {\n        nativeData[key] = typeMap;\n      }\n    }\n  }\n\n  return nativeData;\n}\n\nfunction buildNativeArray(array) {\n  var nativeArray = [];\n\n  if (array) {\n    for (var i = 0; i < array.length; i++) {\n      var value = array[i];\n      var typeMap = generateNativeData(value);\n\n      if (typeMap) {\n        nativeArray.push(typeMap);\n      }\n    }\n  }\n\n  return nativeArray;\n}\n\nfunction generateNativeData(value) {\n  if (Number.isNaN(value)) {\n    return (0, _typemap.getTypeMapInt)('nan');\n  }\n\n  if (value === Number.NEGATIVE_INFINITY) {\n    return (0, _typemap.getTypeMapInt)('-infinity');\n  }\n\n  if (value === Number.POSITIVE_INFINITY) {\n    return (0, _typemap.getTypeMapInt)('infinity');\n  }\n\n  if ((0, _common.isNull)(value) || (0, _common.isUndefined)(value)) {\n    return (0, _typemap.getTypeMapInt)('null');\n  }\n\n  if (value === _FirestoreFieldPath.DOCUMENT_ID) {\n    return (0, _typemap.getTypeMapInt)('documentid');\n  }\n\n  if ((0, _common.isBoolean)(value)) {\n    if (value === true) {\n      return (0, _typemap.getTypeMapInt)('booleanTrue');\n    }\n\n    return (0, _typemap.getTypeMapInt)('booleanFalse');\n  }\n\n  if ((0, _common.isNumber)(value)) {\n    if (_common.isAndroid) {\n      return (0, _typemap.getTypeMapInt)('number', value.toString());\n    }\n\n    return (0, _typemap.getTypeMapInt)('number', value);\n  }\n\n  if ((0, _common.isString)(value)) {\n    if (value === '') {\n      return (0, _typemap.getTypeMapInt)('stringEmpty');\n    }\n\n    return (0, _typemap.getTypeMapInt)('string', value);\n  }\n\n  if ((0, _common.isArray)(value)) {\n    return (0, _typemap.getTypeMapInt)('array', buildNativeArray(value));\n  }\n\n  if ((0, _common.isObject)(value)) {\n    if (value instanceof FirestoreDocumentReference) {\n      return (0, _typemap.getTypeMapInt)('reference', value.path);\n    }\n\n    if (value instanceof _FirestoreGeoPoint.default) {\n      return (0, _typemap.getTypeMapInt)('geopoint', [value.latitude, value.longitude]);\n    }\n\n    if ((0, _common.isDate)(value)) {\n      var timestamp = _FirestoreTimestamp.default.fromDate(value);\n\n      return (0, _typemap.getTypeMapInt)('timestamp', [timestamp.seconds, timestamp.nanoseconds]);\n    }\n\n    if (value instanceof _FirestoreTimestamp.default) {\n      return (0, _typemap.getTypeMapInt)('timestamp', [value.seconds, value.nanoseconds]);\n    }\n\n    if (value instanceof _FirestoreBlob.default) {\n      return (0, _typemap.getTypeMapInt)('blob', value.toBase64());\n    }\n\n    if (value instanceof FirestoreFieldValue) {\n      return (0, _typemap.getTypeMapInt)('fieldvalue', [value._type, value._elements]);\n    }\n\n    return (0, _typemap.getTypeMapInt)('object', buildNativeMap(value));\n  }\n\n  console.warn(\"Unknown data type received \" + value);\n  return (0, _typemap.getTypeMapInt)('unknown');\n}\n\nfunction parseNativeMap(firestore, nativeData) {\n  var data;\n\n  if (nativeData) {\n    data = {};\n    var entries = Object.entries(nativeData);\n\n    for (var i = 0; i < entries.length; i++) {\n      var _entries$i = (0, _slicedToArray2.default)(entries[i], 2),\n          key = _entries$i[0],\n          typeArray = _entries$i[1];\n\n      data[key] = parseNativeData(firestore, typeArray);\n    }\n  }\n\n  return data;\n}\n\nfunction parseNativeArray(firestore, nativeArray) {\n  var array = [];\n\n  if (nativeArray) {\n    for (var i = 0; i < nativeArray.length; i++) {\n      array.push(parseNativeData(firestore, nativeArray[i]));\n    }\n  }\n\n  return array;\n}\n\nfunction parseNativeData(firestore, nativeArray) {\n  var _nativeArray = (0, _slicedToArray2.default)(nativeArray, 2),\n      int = _nativeArray[0],\n      value = _nativeArray[1];\n\n  var type = (0, _typemap.getTypeMapName)(int);\n\n  switch (type) {\n    case 'nan':\n      return NaN;\n\n    case '-infinity':\n      return -Infinity;\n\n    case 'infinity':\n      return Infinity;\n\n    case 'null':\n      return null;\n\n    case 'booleanTrue':\n      return true;\n\n    case 'booleanFalse':\n      return false;\n\n    case 'number':\n    case 'string':\n      return value;\n\n    case 'stringEmpty':\n      return '';\n\n    case 'array':\n      return parseNativeArray(firestore, value);\n\n    case 'object':\n      return parseNativeMap(firestore, value);\n\n    case 'reference':\n      return new FirestoreDocumentReference(firestore, _FirestorePath.default.fromName(value));\n\n    case 'geopoint':\n      return new _FirestoreGeoPoint.default(value[0], value[1]);\n\n    case 'timestamp':\n      return new _FirestoreTimestamp.default(value[0], value[1]);\n\n    case 'blob':\n      return _FirestoreBlob.default.fromBase64String(value);\n\n    default:\n      console.warn(\"Unknown data type received from native channel: \" + type);\n      return value;\n  }\n}","map":{"version":3,"sources":["C:/Users/mitba/React Native/p-indicator-1/node_modules/@react-native-firebase/firestore/lib/utils/serialize.js"],"names":["FirestoreDocumentReference","provideDocumentReferenceClass","documentReference","FirestoreFieldValue","provideFieldValueClass","fieldValue","buildNativeMap","data","nativeData","keys","Object","i","length","key","typeMap","generateNativeData","buildNativeArray","array","nativeArray","value","push","Number","isNaN","NEGATIVE_INFINITY","POSITIVE_INFINITY","DOCUMENT_ID","isAndroid","toString","path","FirestoreGeoPoint","latitude","longitude","timestamp","FirestoreTimestamp","fromDate","seconds","nanoseconds","FirestoreBlob","toBase64","_type","_elements","console","warn","parseNativeMap","firestore","entries","typeArray","parseNativeData","parseNativeArray","int","type","NaN","Infinity","FirestorePath","fromName","fromBase64String"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isAndroid,\n  isArray,\n  isBoolean,\n  isDate,\n  isNull,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n} from '@react-native-firebase/app/lib/common';\nimport FirestoreBlob from '../FirestoreBlob';\nimport { DOCUMENT_ID } from '../FirestoreFieldPath';\nimport FirestoreGeoPoint from '../FirestoreGeoPoint';\nimport FirestorePath from '../FirestorePath';\nimport FirestoreTimestamp from '../FirestoreTimestamp';\nimport { getTypeMapInt, getTypeMapName } from './typemap';\n\n// To avoid React Native require cycle warnings\nlet FirestoreDocumentReference = null;\nexport function provideDocumentReferenceClass(documentReference) {\n  FirestoreDocumentReference = documentReference;\n}\n\nlet FirestoreFieldValue = null;\nexport function provideFieldValueClass(fieldValue) {\n  FirestoreFieldValue = fieldValue;\n}\n\n/**\n *\n * @param data\n */\nexport function buildNativeMap(data) {\n  const nativeData = {};\n  if (data) {\n    const keys = Object.keys(data);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const typeMap = generateNativeData(data[key]);\n      if (typeMap) {\n        nativeData[key] = typeMap;\n      }\n    }\n  }\n  return nativeData;\n}\n\n/**\n *\n * @param array\n * @returns {Array}\n */\nexport function buildNativeArray(array) {\n  const nativeArray = [];\n  if (array) {\n    for (let i = 0; i < array.length; i++) {\n      const value = array[i];\n      const typeMap = generateNativeData(value);\n      if (typeMap) {\n        nativeArray.push(typeMap);\n      }\n    }\n  }\n  return nativeArray;\n}\n\n/**\n * Creates a lightweight array of an object value to be sent over the bridge.\n * The type is convered to an integer which is handled on the native side\n * to create the correct types.\n *\n * Example: [7, 'some string'];\n *\n * @param value\n * @returns {*}\n */\nexport function generateNativeData(value) {\n  if (Number.isNaN(value)) {\n    return getTypeMapInt('nan');\n  }\n\n  if (value === Number.NEGATIVE_INFINITY) {\n    return getTypeMapInt('-infinity');\n  }\n\n  if (value === Number.POSITIVE_INFINITY) {\n    return getTypeMapInt('infinity');\n  }\n\n  if (isNull(value) || isUndefined(value)) {\n    return getTypeMapInt('null');\n  }\n\n  if (value === DOCUMENT_ID) {\n    return getTypeMapInt('documentid');\n  }\n\n  if (isBoolean(value)) {\n    if (value === true) {\n      return getTypeMapInt('booleanTrue');\n    }\n    return getTypeMapInt('booleanFalse');\n  }\n\n  if (isNumber(value)) {\n    if (isAndroid) {\n      return getTypeMapInt('number', value.toString());\n    }\n    return getTypeMapInt('number', value);\n  }\n\n  if (isString(value)) {\n    if (value === '') {\n      return getTypeMapInt('stringEmpty');\n    }\n    return getTypeMapInt('string', value);\n  }\n\n  if (isArray(value)) {\n    return getTypeMapInt('array', buildNativeArray(value));\n  }\n\n  if (isObject(value)) {\n    if (value instanceof FirestoreDocumentReference) {\n      return getTypeMapInt('reference', value.path);\n    }\n\n    if (value instanceof FirestoreGeoPoint) {\n      return getTypeMapInt('geopoint', [value.latitude, value.longitude]);\n    }\n\n    // Handle Date objects are Timestamps as per web sdk\n    if (isDate(value)) {\n      const timestamp = FirestoreTimestamp.fromDate(value);\n      return getTypeMapInt('timestamp', [timestamp.seconds, timestamp.nanoseconds]);\n    }\n\n    if (value instanceof FirestoreTimestamp) {\n      return getTypeMapInt('timestamp', [value.seconds, value.nanoseconds]);\n    }\n\n    if (value instanceof FirestoreBlob) {\n      return getTypeMapInt('blob', value.toBase64());\n    }\n\n    if (value instanceof FirestoreFieldValue) {\n      return getTypeMapInt('fieldvalue', [value._type, value._elements]);\n    }\n\n    return getTypeMapInt('object', buildNativeMap(value));\n  }\n\n  // eslint-disable-next-line no-console\n  console.warn(`Unknown data type received ${value}`);\n\n  return getTypeMapInt('unknown');\n}\n\n/**\n *\n * @param firestore\n * @param nativeData\n */\nexport function parseNativeMap(firestore, nativeData) {\n  let data;\n  if (nativeData) {\n    data = {};\n    const entries = Object.entries(nativeData);\n    for (let i = 0; i < entries.length; i++) {\n      const [key, typeArray] = entries[i];\n      data[key] = parseNativeData(firestore, typeArray);\n    }\n  }\n  return data;\n}\n\n/**\n *\n * @param firestore\n * @param nativeArray\n * @returns {Array}\n */\nexport function parseNativeArray(firestore, nativeArray) {\n  const array = [];\n  if (nativeArray) {\n    for (let i = 0; i < nativeArray.length; i++) {\n      array.push(parseNativeData(firestore, nativeArray[i]));\n    }\n  }\n  return array;\n}\n\n/**\n * Data returned from native is constructed in the same way it sent to keep\n * payloads over the bridge as small as possible. The index matches to a type\n * which is then created on JS land.\n *\n * Example: [7, 'string']\n *\n * @param firestore\n * @param nativeArray\n * @returns *\n */\nexport function parseNativeData(firestore, nativeArray) {\n  const [int, value] = nativeArray;\n  const type = getTypeMapName(int);\n\n  switch (type) {\n    case 'nan':\n      return NaN;\n    case '-infinity':\n      return -Infinity;\n    case 'infinity':\n      return Infinity;\n    case 'null':\n      return null;\n    case 'booleanTrue':\n      return true;\n    case 'booleanFalse':\n      return false;\n    case 'number':\n    case 'string':\n      return value;\n    case 'stringEmpty':\n      return '';\n    case 'array':\n      return parseNativeArray(firestore, value);\n    case 'object':\n      return parseNativeMap(firestore, value);\n    case 'reference':\n      return new FirestoreDocumentReference(firestore, FirestorePath.fromName(value));\n    case 'geopoint':\n      return new FirestoreGeoPoint(value[0], value[1]);\n    case 'timestamp':\n      return new FirestoreTimestamp(value[0], value[1]);\n    case 'blob':\n      return FirestoreBlob.fromBase64String(value);\n    default:\n      // eslint-disable-next-line no-console\n      console.warn(`Unknown data type received from native channel: ${type}`);\n      return value;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}