{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _common = require(\"@react-native-firebase/app/lib/common\");\n\nvar _FirestoreDocumentReference = _interopRequireWildcard(require(\"./FirestoreDocumentReference\"));\n\nvar _FirestoreFieldPath = _interopRequireWildcard(require(\"./FirestoreFieldPath\"));\n\nvar _FirestorePath = _interopRequireDefault(require(\"./FirestorePath\"));\n\nvar _FirestoreSnapshotMetadata = _interopRequireDefault(require(\"./FirestoreSnapshotMetadata\"));\n\nvar _utils = require(\"./utils\");\n\nvar _serialize = require(\"./utils/serialize\");\n\nvar FirestoreDocumentSnapshot = function () {\n  function FirestoreDocumentSnapshot(firestore, nativeData) {\n    (0, _classCallCheck2.default)(this, FirestoreDocumentSnapshot);\n    this._data = (0, _serialize.parseNativeMap)(firestore, nativeData.data);\n    this._metadata = new _FirestoreSnapshotMetadata.default(nativeData.metadata);\n    this._ref = new _FirestoreDocumentReference.default(firestore, _FirestorePath.default.fromName(nativeData.path));\n    this._exists = nativeData.exists;\n  }\n\n  (0, _createClass2.default)(FirestoreDocumentSnapshot, [{\n    key: \"data\",\n    value: function data() {\n      return this._data;\n    }\n  }, {\n    key: \"get\",\n    value: function get(fieldPath) {\n      if (!(0, _common.isString)(fieldPath) && !(fieldPath instanceof _FirestoreFieldPath.default)) {\n        throw new Error(\"firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' expected type string or FieldPath.\");\n      }\n\n      var path;\n\n      if ((0, _common.isString)(fieldPath)) {\n        try {\n          path = (0, _FirestoreFieldPath.fromDotSeparatedString)(fieldPath);\n        } catch (e) {\n          throw new Error(\"firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' \" + e.message + \".\");\n        }\n      } else {\n        path = fieldPath;\n      }\n\n      return (0, _utils.extractFieldPathData)(this._data, path._segments);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreDocumentSnapshot)) {\n        throw new Error(\"firebase.firestore() DocumentSnapshot.isEqual(*) 'other' expected a DocumentSnapshot instance.\");\n      }\n\n      if (this.exists !== other.exists || !this.metadata.isEqual(other.metadata) || !this.ref.isEqual(other.ref)) {\n        return false;\n      }\n\n      var thisData = JSON.stringify(this.data());\n      var otherData = JSON.stringify(other.data());\n      return thisData === otherData;\n    }\n  }, {\n    key: \"exists\",\n    get: function get() {\n      return this._exists;\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._ref.id;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._metadata;\n    }\n  }, {\n    key: \"ref\",\n    get: function get() {\n      return this._ref;\n    }\n  }]);\n  return FirestoreDocumentSnapshot;\n}();\n\nexports.default = FirestoreDocumentSnapshot;\n(0, _FirestoreDocumentReference.provideDocumentSnapshotClass)(FirestoreDocumentSnapshot);","map":{"version":3,"sources":["C:/Users/mitba/Razorpay/p-indicator-1/node_modules/@react-native-firebase/firestore/lib/FirestoreDocumentSnapshot.js"],"names":["FirestoreDocumentSnapshot","firestore","nativeData","_data","data","_metadata","FirestoreSnapshotMetadata","metadata","_ref","FirestoreDocumentReference","FirestorePath","fromName","path","_exists","exists","fieldPath","FirestoreFieldPath","Error","e","message","_segments","other","isEqual","ref","thisData","JSON","stringify","otherData","id"],"mappings":";;;;;;;;;;;;;AAiBA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;IAEqBA,yB;AACnB,qCAAYC,SAAZ,EAAuBC,UAAvB,EAAmC;AAAA;AACjC,SAAKC,KAAL,GAAa,+BAAeF,SAAf,EAA0BC,UAAU,CAACE,IAArC,CAAb;AACA,SAAKC,SAAL,GAAiB,IAAIC,kCAAJ,CAA8BJ,UAAU,CAACK,QAAzC,CAAjB;AACA,SAAKC,IAAL,GAAY,IAAIC,mCAAJ,CAA+BR,SAA/B,EAA0CS,uBAAcC,QAAd,CAAuBT,UAAU,CAACU,IAAlC,CAA1C,CAAZ;AACA,SAAKC,OAAL,GAAeX,UAAU,CAACY,MAA1B;AACD;;;;2BAkBM;AAuBL,aAAO,KAAKX,KAAZ;AACD;;;wBAEGY,S,EAAW;AAGb,UAAI,CAAC,sBAASA,SAAT,CAAD,IAAwB,EAAEA,SAAS,YAAYC,2BAAvB,CAA5B,EAAwE;AACtE,cAAM,IAAIC,KAAJ,CACJ,6FADI,CAAN;AAGD;;AAED,UAAIL,IAAJ;;AAEA,UAAI,sBAASG,SAAT,CAAJ,EAAyB;AACvB,YAAI;AACFH,UAAAA,IAAI,GAAG,gDAAuBG,SAAvB,CAAP;AACD,SAFD,CAEE,OAAOG,CAAP,EAAU;AACV,gBAAM,IAAID,KAAJ,+DAAsEC,CAAC,CAACC,OAAxE,OAAN;AACD;AACF,OAND,MAMO;AAELP,QAAAA,IAAI,GAAGG,SAAP;AACD;;AAED,aAAO,iCAAqB,KAAKZ,KAA1B,EAAiCS,IAAI,CAACQ,SAAtC,CAAP;AACD;;;4BAEOC,K,EAAO;AACb,UAAI,EAAEA,KAAK,YAAYrB,yBAAnB,CAAJ,EAAmD;AACjD,cAAM,IAAIiB,KAAJ,CACJ,gGADI,CAAN;AAGD;;AAED,UACE,KAAKH,MAAL,KAAgBO,KAAK,CAACP,MAAtB,IACA,CAAC,KAAKP,QAAL,CAAce,OAAd,CAAsBD,KAAK,CAACd,QAA5B,CADD,IAEA,CAAC,KAAKgB,GAAL,CAASD,OAAT,CAAiBD,KAAK,CAACE,GAAvB,CAHH,EAIE;AACA,eAAO,KAAP;AACD;;AAED,UAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAe,KAAKtB,IAAL,EAAf,CAAjB;AACA,UAAMuB,SAAS,GAAGF,IAAI,CAACC,SAAL,CAAeL,KAAK,CAACjB,IAAN,EAAf,CAAlB;AAEA,aAAOoB,QAAQ,KAAKG,SAApB;AACD;;;wBAtFY;AACX,aAAO,KAAKd,OAAZ;AACD;;;wBAEQ;AACP,aAAO,KAAKL,IAAL,CAAUoB,EAAjB;AACD;;;wBAEc;AACb,aAAO,KAAKvB,SAAZ;AACD;;;wBAES;AACR,aAAO,KAAKG,IAAZ;AACD;;;;;;AA4EH,8DAA6BR,yBAA7B","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference, {\n  provideDocumentSnapshotClass,\n} from './FirestoreDocumentReference';\nimport FirestoreFieldPath, { fromDotSeparatedString } from './FirestoreFieldPath';\nimport FirestorePath from './FirestorePath';\nimport FirestoreSnapshotMetadata from './FirestoreSnapshotMetadata';\nimport { extractFieldPathData } from './utils';\nimport { parseNativeMap } from './utils/serialize';\n\nexport default class FirestoreDocumentSnapshot {\n  constructor(firestore, nativeData) {\n    this._data = parseNativeMap(firestore, nativeData.data);\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n    this._ref = new FirestoreDocumentReference(firestore, FirestorePath.fromName(nativeData.path));\n    this._exists = nativeData.exists;\n  }\n\n  get exists() {\n    return this._exists;\n  }\n\n  get id() {\n    return this._ref.id;\n  }\n\n  get metadata() {\n    return this._metadata;\n  }\n\n  get ref() {\n    return this._ref;\n  }\n\n  data() {\n    // TODO: ehesp: Figure out how to handle this.\n    // const snapshotOptions = {};\n    //\n    // if (!isUndefined(options)) {\n    //   if (!isObject(options)) {\n    //     throw new Error(\n    //       `firebase.firestore() DocumentSnapshot.data(*) 'options' expected an object if defined.`,\n    //     );\n    //   }\n    //\n    //   if (\n    //     options.serverTimestamps &&\n    //     options.serverTimestamps !== 'estimate' &&\n    //     options.serverTimestamps !== 'previous' &&\n    //     options.serverTimestamps !== 'none'\n    //   ) {\n    //     throw new Error(\n    //       `firebase.firestore() DocumentSnapshot.data(*) 'options.serverTimestamps' expected one of 'estimate', 'previous' or 'none'.`,\n    //     );\n    //   }\n    // }\n\n    return this._data;\n  }\n\n  get(fieldPath) {\n    // TODO: ehesp: How are SnapshotOptions handled?\n\n    if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath)) {\n      throw new Error(\n        \"firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' expected type string or FieldPath.\",\n      );\n    }\n\n    let path;\n\n    if (isString(fieldPath)) {\n      try {\n        path = fromDotSeparatedString(fieldPath);\n      } catch (e) {\n        throw new Error(`firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' ${e.message}.`);\n      }\n    } else {\n      // Is already field path\n      path = fieldPath;\n    }\n\n    return extractFieldPathData(this._data, path._segments);\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreDocumentSnapshot)) {\n      throw new Error(\n        \"firebase.firestore() DocumentSnapshot.isEqual(*) 'other' expected a DocumentSnapshot instance.\",\n      );\n    }\n\n    if (\n      this.exists !== other.exists ||\n      !this.metadata.isEqual(other.metadata) ||\n      !this.ref.isEqual(other.ref)\n    ) {\n      return false;\n    }\n\n    const thisData = JSON.stringify(this.data());\n    const otherData = JSON.stringify(other.data());\n\n    return thisData === otherData;\n  }\n}\n\n// To avoid React Native require cycle\nprovideDocumentSnapshotClass(FirestoreDocumentSnapshot);\n"]},"metadata":{},"sourceType":"script"}