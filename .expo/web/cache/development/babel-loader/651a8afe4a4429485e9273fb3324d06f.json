{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _common = require(\"@react-native-firebase/app/lib/common\");\n\nvar _FirestoreDocumentChange = _interopRequireDefault(require(\"./FirestoreDocumentChange\"));\n\nvar _FirestoreDocumentSnapshot = _interopRequireDefault(require(\"./FirestoreDocumentSnapshot\"));\n\nvar _FirestoreSnapshotMetadata = _interopRequireDefault(require(\"./FirestoreSnapshotMetadata\"));\n\nvar FirestoreQuerySnapshot = function () {\n  function FirestoreQuerySnapshot(firestore, query, nativeData) {\n    (0, _classCallCheck2.default)(this, FirestoreQuerySnapshot);\n    this._query = query;\n    this._source = nativeData.source;\n    this._excludesMetadataChanges = nativeData.excludesMetadataChanges;\n    this._changes = nativeData.changes.map(function ($) {\n      return new _FirestoreDocumentChange.default(firestore, $);\n    });\n    this._docs = nativeData.documents.map(function ($) {\n      return new _FirestoreDocumentSnapshot.default(firestore, $);\n    });\n    this._metadata = new _FirestoreSnapshotMetadata.default(nativeData.metadata);\n  }\n\n  (0, _createClass2.default)(FirestoreQuerySnapshot, [{\n    key: \"docChanges\",\n    value: function docChanges(options) {\n      if (!(0, _common.isUndefined)(options) && !(0, _common.isObject)(options)) {\n        throw new Error(\"firebase.firestore() QuerySnapshot.docChanges(*) 'options' expected an object.\");\n      }\n\n      var includeMetaDataChanges = false;\n\n      if (options) {\n        if (!(0, _common.isBoolean)(options.includeMetadataChanges)) {\n          throw new Error(\"firebase.firestore() QuerySnapshot.docChanges(*) 'options.includeMetadataChanges' expected a boolean.\");\n        }\n\n        includeMetaDataChanges = options.includeMetadataChanges;\n      }\n\n      if (this._source === 'get') {\n        return this._changes;\n      }\n\n      if (includeMetaDataChanges && this._excludesMetadataChanges) {\n        throw new Error('firebase.firestore() QuerySnapshot.docChanges() To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().');\n      }\n\n      return this._changes.filter(function ($) {\n        if (!includeMetaDataChanges) {\n          return $._isMetadataChange === false;\n        }\n\n        return true;\n      });\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback, thisArg) {\n      if (!(0, _common.isFunction)(callback)) {\n        throw new Error(\"firebase.firestore() QuerySnapshot.forEach(*) 'callback' expected a function.\");\n      }\n\n      var cb = thisArg ? callback.bind(thisArg) : callback;\n\n      for (var i = 0; i < this._docs.length; i++) {\n        cb(this._docs[i], i);\n      }\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreQuerySnapshot)) {\n        throw new Error(\"firebase.firestore() QuerySnapshot.isEqual(*) 'other' expected a QuerySnapshot instance.\");\n      }\n\n      if (this.empty !== other.empty || this.size !== other.size || !this.metadata.isEqual(other.metadata)) {\n        return false;\n      }\n\n      for (var i = 0; i < this.docs.length; i++) {\n        var thisDoc = this.docs[i];\n        var otherDoc = other.docs[i];\n\n        if (!thisDoc.isEqual(otherDoc)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"docs\",\n    get: function get() {\n      return this._docs;\n    }\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return this._docs.length === 0;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._metadata;\n    }\n  }, {\n    key: \"query\",\n    get: function get() {\n      return this._query;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._docs.length;\n    }\n  }]);\n  return FirestoreQuerySnapshot;\n}();\n\nexports.default = FirestoreQuerySnapshot;","map":{"version":3,"sources":["C:/Users/mitba/React Native/p-indicator-1/node_modules/@react-native-firebase/firestore/lib/FirestoreQuerySnapshot.js"],"names":["FirestoreQuerySnapshot","firestore","query","nativeData","_query","_source","source","_excludesMetadataChanges","excludesMetadataChanges","_changes","changes","map","$","FirestoreDocumentChange","_docs","documents","FirestoreDocumentSnapshot","_metadata","FirestoreSnapshotMetadata","metadata","options","Error","includeMetaDataChanges","includeMetadataChanges","filter","_isMetadataChange","callback","thisArg","cb","bind","i","length","other","empty","size","isEqual","docs","thisDoc","otherDoc"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isBoolean,\n  isFunction,\n  isObject,\n  isUndefined,\n} from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentChange from './FirestoreDocumentChange';\nimport FirestoreDocumentSnapshot from './FirestoreDocumentSnapshot';\nimport FirestoreSnapshotMetadata from './FirestoreSnapshotMetadata';\n\nexport default class FirestoreQuerySnapshot {\n  constructor(firestore, query, nativeData) {\n    this._query = query;\n    this._source = nativeData.source;\n    this._excludesMetadataChanges = nativeData.excludesMetadataChanges;\n    this._changes = nativeData.changes.map($ => new FirestoreDocumentChange(firestore, $));\n    this._docs = nativeData.documents.map($ => new FirestoreDocumentSnapshot(firestore, $));\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n  }\n\n  get docs() {\n    return this._docs;\n  }\n\n  get empty() {\n    return this._docs.length === 0;\n  }\n\n  get metadata() {\n    return this._metadata;\n  }\n\n  get query() {\n    return this._query;\n  }\n\n  get size() {\n    return this._docs.length;\n  }\n\n  docChanges(options) {\n    if (!isUndefined(options) && !isObject(options)) {\n      throw new Error(\n        \"firebase.firestore() QuerySnapshot.docChanges(*) 'options' expected an object.\",\n      );\n    }\n\n    let includeMetaDataChanges = false;\n\n    if (options) {\n      if (!isBoolean(options.includeMetadataChanges)) {\n        throw new Error(\n          \"firebase.firestore() QuerySnapshot.docChanges(*) 'options.includeMetadataChanges' expected a boolean.\",\n        );\n      }\n\n      includeMetaDataChanges = options.includeMetadataChanges;\n    }\n\n    // A get query should always return the document changes from native\n    if (this._source === 'get') {\n      return this._changes;\n    }\n\n    if (includeMetaDataChanges && this._excludesMetadataChanges) {\n      throw new Error(\n        'firebase.firestore() QuerySnapshot.docChanges() To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().',\n      );\n    }\n\n    return this._changes.filter($ => {\n      // Remove all changes that have come from metadata changes list\n      if (!includeMetaDataChanges) {\n        return $._isMetadataChange === false;\n      }\n\n      return true;\n    });\n  }\n\n  forEach(callback, thisArg) {\n    if (!isFunction(callback)) {\n      throw new Error(\n        \"firebase.firestore() QuerySnapshot.forEach(*) 'callback' expected a function.\",\n      );\n    }\n\n    const cb = thisArg ? callback.bind(thisArg) : callback;\n\n    for (let i = 0; i < this._docs.length; i++) {\n      cb(this._docs[i], i);\n    }\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreQuerySnapshot)) {\n      throw new Error(\n        \"firebase.firestore() QuerySnapshot.isEqual(*) 'other' expected a QuerySnapshot instance.\",\n      );\n    }\n\n    // Simple checks first\n    if (\n      this.empty !== other.empty ||\n      this.size !== other.size ||\n      !this.metadata.isEqual(other.metadata)\n    ) {\n      return false;\n    }\n\n    // Expensive check\n    // Each doc must be in order & have the same data\n    for (let i = 0; i < this.docs.length; i++) {\n      const thisDoc = this.docs[i];\n      const otherDoc = other.docs[i];\n\n      if (!thisDoc.isEqual(otherDoc)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}