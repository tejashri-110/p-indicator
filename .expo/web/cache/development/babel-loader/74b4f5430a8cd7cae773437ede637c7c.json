{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromDotSeparatedString = fromDotSeparatedString;\nexports.DOCUMENT_ID = exports.default = void 0;\n\nvar _construct2 = _interopRequireDefault(require(\"@babel/runtime/helpers/construct\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _common = require(\"@react-native-firebase/app/lib/common\");\n\nvar RESERVED = new RegExp('[~*/\\\\[\\\\]]');\n\nvar FirestoreFieldPath = function () {\n  (0, _createClass2.default)(FirestoreFieldPath, null, [{\n    key: \"documentId\",\n    value: function documentId() {\n      return DOCUMENT_ID;\n    }\n  }]);\n\n  function FirestoreFieldPath() {\n    (0, _classCallCheck2.default)(this, FirestoreFieldPath);\n\n    for (var _len = arguments.length, segments = new Array(_len), _key = 0; _key < _len; _key++) {\n      segments[_key] = arguments[_key];\n    }\n\n    if (segments.length === 0) {\n      throw new Error('firebase.firestore.FieldPath cannot construct FieldPath with no segments.');\n    }\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n\n      if (!(0, _common.isString)(segment) || segment === '') {\n        throw new Error(\"firebase.firestore.FieldPath invalid segment at index \" + i + \", expected a non-empty string.\");\n      }\n    }\n\n    this._segments = segments;\n  }\n\n  (0, _createClass2.default)(FirestoreFieldPath, [{\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreFieldPath)) {\n        throw new Error(\"firebase.firestore.FieldPath.isEqual(*) 'other' expected instance of FieldPath.\");\n      }\n\n      return this._toPath() === other._toPath();\n    }\n  }, {\n    key: \"_toPath\",\n    value: function _toPath() {\n      return this._segments.join('.');\n    }\n  }, {\n    key: \"_toArray\",\n    value: function _toArray() {\n      return this._segments;\n    }\n  }]);\n  return FirestoreFieldPath;\n}();\n\nexports.default = FirestoreFieldPath;\nvar DOCUMENT_ID = new FirestoreFieldPath('__name__');\nexports.DOCUMENT_ID = DOCUMENT_ID;\n\nfunction fromDotSeparatedString(path) {\n  if (path === '' || path.startsWith('.') || path.endsWith('.') || path.indexOf('..') > 0) {\n    throw new Error(\"Invalid field path. Paths must not be empty, begin with '.', end with '.', or contain '..'.\");\n  }\n\n  var found = path.search(RESERVED);\n\n  if (found > 0) {\n    throw new Error(\"Invalid field path (\" + path + \"). Paths must not contain '~', '*', '/', '[', or ']'.\");\n  }\n\n  return (0, _construct2.default)(FirestoreFieldPath, (0, _toConsumableArray2.default)(path.split('.')));\n}","map":{"version":3,"sources":["C:/Users/mitba/Razorpay/p-indicator-1/node_modules/@react-native-firebase/firestore/lib/FirestoreFieldPath.js"],"names":["RESERVED","RegExp","FirestoreFieldPath","DOCUMENT_ID","segments","length","Error","i","segment","_segments","other","_toPath","join","fromDotSeparatedString","path","startsWith","endsWith","indexOf","found","search","split"],"mappings":";;;;;;;;;;;;;;;;AAiBA;;AAEA,IAAMA,QAAQ,GAAG,IAAIC,MAAJ,CAAW,aAAX,CAAjB;;IAEqBC,kB;;;iCACC;AAClB,aAAOC,WAAP;AACD;;;AAED,gCAAyB;AAAA;;AAAA,sCAAVC,QAAU;AAAVA,MAAAA,QAAU;AAAA;;AACvB,QAAIA,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,YAAM,IAAIC,KAAJ,CAAU,2EAAV,CAAN;AACD;;AAED,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACC,MAA7B,EAAqCE,CAAC,EAAtC,EAA0C;AACxC,UAAMC,OAAO,GAAGJ,QAAQ,CAACG,CAAD,CAAxB;;AACA,UAAI,CAAC,sBAASC,OAAT,CAAD,IAAsBA,OAAO,KAAK,EAAtC,EAA0C;AACxC,cAAM,IAAIF,KAAJ,4DACqDC,CADrD,oCAAN;AAGD;AACF;;AAED,SAAKE,SAAL,GAAiBL,QAAjB;AACD;;;;4BAEOM,K,EAAO;AACb,UAAI,EAAEA,KAAK,YAAYR,kBAAnB,CAAJ,EAA4C;AAC1C,cAAM,IAAII,KAAJ,CACJ,iFADI,CAAN;AAGD;;AAED,aAAO,KAAKK,OAAL,OAAmBD,KAAK,CAACC,OAAN,EAA1B;AACD;;;8BAES;AACR,aAAO,KAAKF,SAAL,CAAeG,IAAf,CAAoB,GAApB,CAAP;AACD;;;+BAEU;AACT,aAAO,KAAKH,SAAZ;AACD;;;;;;AAGI,IAAMN,WAAW,GAAG,IAAID,kBAAJ,CAAuB,UAAvB,CAApB;;;AAEA,SAASW,sBAAT,CAAgCC,IAAhC,EAAsC;AAC3C,MAAIA,IAAI,KAAK,EAAT,IAAeA,IAAI,CAACC,UAAL,CAAgB,GAAhB,CAAf,IAAuCD,IAAI,CAACE,QAAL,CAAc,GAAd,CAAvC,IAA6DF,IAAI,CAACG,OAAL,CAAa,IAAb,IAAqB,CAAtF,EAAyF;AACvF,UAAM,IAAIX,KAAJ,CACJ,6FADI,CAAN;AAGD;;AAED,MAAMY,KAAK,GAAGJ,IAAI,CAACK,MAAL,CAAYnB,QAAZ,CAAd;;AAEA,MAAIkB,KAAK,GAAG,CAAZ,EAAe;AACb,UAAM,IAAIZ,KAAJ,0BACmBQ,IADnB,2DAAN;AAGD;;AAED,kCAAWZ,kBAAX,mCAAiCY,IAAI,CAACM,KAAL,CAAW,GAAX,CAAjC;AACD","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '@react-native-firebase/app/lib/common';\n\nconst RESERVED = new RegExp('[~*/\\\\[\\\\]]');\n\nexport default class FirestoreFieldPath {\n  static documentId() {\n    return DOCUMENT_ID;\n  }\n\n  constructor(...segments) {\n    if (segments.length === 0) {\n      throw new Error('firebase.firestore.FieldPath cannot construct FieldPath with no segments.');\n    }\n\n    for (let i = 0; i < segments.length; i++) {\n      const segment = segments[i];\n      if (!isString(segment) || segment === '') {\n        throw new Error(\n          `firebase.firestore.FieldPath invalid segment at index ${i}, expected a non-empty string.`,\n        );\n      }\n    }\n\n    this._segments = segments;\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreFieldPath)) {\n      throw new Error(\n        \"firebase.firestore.FieldPath.isEqual(*) 'other' expected instance of FieldPath.\",\n      );\n    }\n\n    return this._toPath() === other._toPath();\n  }\n\n  _toPath() {\n    return this._segments.join('.');\n  }\n\n  _toArray() {\n    return this._segments;\n  }\n}\n\nexport const DOCUMENT_ID = new FirestoreFieldPath('__name__');\n\nexport function fromDotSeparatedString(path) {\n  if (path === '' || path.startsWith('.') || path.endsWith('.') || path.indexOf('..') > 0) {\n    throw new Error(\n      \"Invalid field path. Paths must not be empty, begin with '.', end with '.', or contain '..'.\",\n    );\n  }\n\n  const found = path.search(RESERVED);\n\n  if (found > 0) {\n    throw new Error(\n      `Invalid field path (${path}). Paths must not contain '~', '*', '/', '[', or ']'.`,\n    );\n  }\n\n  return new FirestoreFieldPath(...path.split('.'));\n}\n"]},"metadata":{},"sourceType":"script"}