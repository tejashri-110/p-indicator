{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.provideCollectionReferenceClass = provideCollectionReferenceClass;\nexports.provideDocumentSnapshotClass = provideDocumentSnapshotClass;\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _common = require(\"@react-native-firebase/app/lib/common\");\n\nvar _NativeFirebaseError = _interopRequireDefault(require(\"@react-native-firebase/app/lib/internal/NativeFirebaseError\"));\n\nvar _utils = require(\"./utils\");\n\nvar _serialize = require(\"./utils/serialize\");\n\nvar FirestoreCollectionReference = null;\n\nfunction provideCollectionReferenceClass(collectionReference) {\n  FirestoreCollectionReference = collectionReference;\n}\n\nvar FirestoreDocumentSnapshot = null;\n\nfunction provideDocumentSnapshotClass(documentSnapshot) {\n  FirestoreDocumentSnapshot = documentSnapshot;\n}\n\nvar _id = 0;\n\nvar FirestoreDocumentReference = function () {\n  function FirestoreDocumentReference(firestore, documentPath) {\n    (0, _classCallCheck2.default)(this, FirestoreDocumentReference);\n    this._firestore = firestore;\n    this._documentPath = documentPath;\n  }\n\n  (0, _createClass2.default)(FirestoreDocumentReference, [{\n    key: \"collection\",\n    value: function collection(collectionPath) {\n      if (!(0, _common.isString)(collectionPath)) {\n        throw new Error(\"firebase.firestore().doc().collection(*) 'collectionPath' must be a string value.\");\n      }\n\n      if (collectionPath === '') {\n        throw new Error(\"firebase.firestore().doc().collection(*) 'collectionPath' must be a non-empty string.\");\n      }\n\n      var path = this._documentPath.child(collectionPath);\n\n      if (!path.isCollection) {\n        throw new Error(\"firebase.firestore().doc().collection(*) 'collectionPath' must point to a collection.\");\n      }\n\n      return new FirestoreCollectionReference(this._firestore, path);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      return this._firestore.native.documentDelete(this.path);\n    }\n  }, {\n    key: \"get\",\n    value: function get(options) {\n      var _this = this;\n\n      if (!(0, _common.isUndefined)(options) && !(0, _common.isObject)(options)) {\n        throw new Error(\"firebase.firestore().doc().get(*) 'options' must be an object is provided.\");\n      }\n\n      if (options && options.source && options.source !== 'default' && options.source !== 'server' && options.source !== 'cache') {\n        throw new Error(\"firebase.firestore().doc().get(*) 'options' GetOptions.source must be one of 'default', 'server' or 'cache'.\");\n      }\n\n      return this._firestore.native.documentGet(this.path, options).then(function (data) {\n        return new FirestoreDocumentSnapshot(_this._firestore, data);\n      });\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreDocumentReference)) {\n        throw new Error(\"firebase.firestore().doc().isEqual(*) 'other' expected a DocumentReference instance.\");\n      }\n\n      return !(this.path !== other.path || this.firestore.app.name !== other.firestore.app.name || this.firestore.app.options.projectId !== other.firestore.app.options.projectId);\n    }\n  }, {\n    key: \"onSnapshot\",\n    value: function onSnapshot() {\n      var _this2 = this;\n\n      var snapshotListenOptions;\n      var callback;\n      var onNext;\n      var onError;\n\n      try {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        var options = (0, _utils.parseSnapshotArgs)(args);\n        snapshotListenOptions = options.snapshotListenOptions;\n        callback = options.callback;\n        onNext = options.onNext;\n        onError = options.onError;\n      } catch (e) {\n        throw new Error(\"firebase.firestore().doc().onSnapshot(*) \" + e.message);\n      }\n\n      function handleSuccess(documentSnapshot) {\n        callback(documentSnapshot, null);\n        onNext(documentSnapshot);\n      }\n\n      function handleError(error) {\n        callback(null, error);\n        onError(error);\n      }\n\n      var listenerId = _id++;\n\n      var onSnapshotSubscription = this._firestore.emitter.addListener(this._firestore.eventNameForApp(\"firestore_document_sync_event:\" + listenerId), function (event) {\n        if (event.body.error) {\n          handleError(_NativeFirebaseError.default.fromEvent(event.body.error, 'firestore'));\n        } else {\n          var documentSnapshot = new FirestoreDocumentSnapshot(_this2._firestore, event.body.snapshot);\n          handleSuccess(documentSnapshot);\n        }\n      });\n\n      var unsubscribe = function unsubscribe() {\n        onSnapshotSubscription.remove();\n\n        _this2._firestore.native.documentOffSnapshot(listenerId);\n      };\n\n      this._firestore.native.documentOnSnapshot(this.path, listenerId, snapshotListenOptions);\n\n      return unsubscribe;\n    }\n  }, {\n    key: \"set\",\n    value: function set(data, options) {\n      if (!(0, _common.isObject)(data)) {\n        throw new Error(\"firebase.firestore().doc().set(*) 'data' must be an object.\");\n      }\n\n      var setOptions;\n\n      try {\n        setOptions = (0, _utils.parseSetOptions)(options);\n      } catch (e) {\n        throw new Error(\"firebase.firestore().doc().set(_, *) \" + e.message + \".\");\n      }\n\n      return this._firestore.native.documentSet(this.path, (0, _serialize.buildNativeMap)(data), setOptions);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      if (args.length === 0) {\n        throw new Error('firebase.firestore().doc().update(*) expected at least 1 argument but was called with 0 arguments.');\n      }\n\n      var data;\n\n      try {\n        data = (0, _utils.parseUpdateArgs)(args);\n      } catch (e) {\n        throw new Error(\"firebase.firestore().doc().update(*) \" + e.message);\n      }\n\n      return this._firestore.native.documentUpdate(this.path, (0, _serialize.buildNativeMap)(data));\n    }\n  }, {\n    key: \"firestore\",\n    get: function get() {\n      return this._firestore;\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._documentPath.id;\n    }\n  }, {\n    key: \"parent\",\n    get: function get() {\n      var parentPath = this._documentPath.parent();\n\n      return new FirestoreCollectionReference(this._firestore, parentPath);\n    }\n  }, {\n    key: \"path\",\n    get: function get() {\n      return this._documentPath.relativeName;\n    }\n  }]);\n  return FirestoreDocumentReference;\n}();\n\nexports.default = FirestoreDocumentReference;\n(0, _serialize.provideDocumentReferenceClass)(FirestoreDocumentReference);","map":{"version":3,"sources":["C:/Users/mitba/Razorpay/p-indicator-1/node_modules/@react-native-firebase/firestore/lib/FirestoreDocumentReference.js"],"names":["FirestoreCollectionReference","provideCollectionReferenceClass","collectionReference","FirestoreDocumentSnapshot","provideDocumentSnapshotClass","documentSnapshot","_id","FirestoreDocumentReference","firestore","documentPath","_firestore","_documentPath","collectionPath","Error","path","child","isCollection","native","documentDelete","options","source","documentGet","then","data","other","app","name","projectId","snapshotListenOptions","callback","onNext","onError","args","e","message","handleSuccess","handleError","error","listenerId","onSnapshotSubscription","emitter","addListener","eventNameForApp","event","body","NativeError","fromEvent","snapshot","unsubscribe","remove","documentOffSnapshot","documentOnSnapshot","setOptions","documentSet","length","documentUpdate","id","parentPath","parent","relativeName"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isObject, isString, isUndefined } from '@react-native-firebase/app/lib/common';\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nimport { parseSetOptions, parseSnapshotArgs, parseUpdateArgs } from './utils';\nimport { buildNativeMap, provideDocumentReferenceClass } from './utils/serialize';\n\n// To avoid React Native require cycle warnings\nlet FirestoreCollectionReference = null;\nexport function provideCollectionReferenceClass(collectionReference) {\n  FirestoreCollectionReference = collectionReference;\n}\n\nlet FirestoreDocumentSnapshot = null;\nexport function provideDocumentSnapshotClass(documentSnapshot) {\n  FirestoreDocumentSnapshot = documentSnapshot;\n}\n\nlet _id = 0;\n\nexport default class FirestoreDocumentReference {\n  constructor(firestore, documentPath) {\n    this._firestore = firestore;\n    this._documentPath = documentPath;\n  }\n\n  get firestore() {\n    return this._firestore;\n  }\n\n  get id() {\n    return this._documentPath.id;\n  }\n\n  get parent() {\n    const parentPath = this._documentPath.parent();\n    return new FirestoreCollectionReference(this._firestore, parentPath);\n  }\n\n  get path() {\n    return this._documentPath.relativeName;\n  }\n\n  collection(collectionPath) {\n    if (!isString(collectionPath)) {\n      throw new Error(\n        \"firebase.firestore().doc().collection(*) 'collectionPath' must be a string value.\",\n      );\n    }\n\n    if (collectionPath === '') {\n      throw new Error(\n        \"firebase.firestore().doc().collection(*) 'collectionPath' must be a non-empty string.\",\n      );\n    }\n\n    const path = this._documentPath.child(collectionPath);\n\n    if (!path.isCollection) {\n      throw new Error(\n        \"firebase.firestore().doc().collection(*) 'collectionPath' must point to a collection.\",\n      );\n    }\n\n    return new FirestoreCollectionReference(this._firestore, path);\n  }\n\n  delete() {\n    return this._firestore.native.documentDelete(this.path);\n  }\n\n  get(options) {\n    if (!isUndefined(options) && !isObject(options)) {\n      throw new Error(\"firebase.firestore().doc().get(*) 'options' must be an object is provided.\");\n    }\n\n    if (\n      options &&\n      options.source &&\n      options.source !== 'default' &&\n      options.source !== 'server' &&\n      options.source !== 'cache'\n    ) {\n      throw new Error(\n        \"firebase.firestore().doc().get(*) 'options' GetOptions.source must be one of 'default', 'server' or 'cache'.\",\n      );\n    }\n\n    return this._firestore.native\n      .documentGet(this.path, options)\n      .then(data => new FirestoreDocumentSnapshot(this._firestore, data));\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().doc().isEqual(*) 'other' expected a DocumentReference instance.\",\n      );\n    }\n\n    return !(\n      this.path !== other.path ||\n      this.firestore.app.name !== other.firestore.app.name ||\n      this.firestore.app.options.projectId !== other.firestore.app.options.projectId\n    );\n  }\n\n  onSnapshot(...args) {\n    let snapshotListenOptions;\n    let callback;\n    let onNext;\n    let onError;\n\n    try {\n      const options = parseSnapshotArgs(args);\n      snapshotListenOptions = options.snapshotListenOptions;\n      callback = options.callback;\n      onNext = options.onNext;\n      onError = options.onError;\n    } catch (e) {\n      throw new Error(`firebase.firestore().doc().onSnapshot(*) ${e.message}`);\n    }\n\n    function handleSuccess(documentSnapshot) {\n      callback(documentSnapshot, null);\n      onNext(documentSnapshot);\n    }\n\n    function handleError(error) {\n      callback(null, error);\n      onError(error);\n    }\n\n    const listenerId = _id++;\n\n    const onSnapshotSubscription = this._firestore.emitter.addListener(\n      this._firestore.eventNameForApp(`firestore_document_sync_event:${listenerId}`),\n      event => {\n        if (event.body.error) {\n          handleError(NativeError.fromEvent(event.body.error, 'firestore'));\n        } else {\n          const documentSnapshot = new FirestoreDocumentSnapshot(\n            this._firestore,\n            event.body.snapshot,\n          );\n          handleSuccess(documentSnapshot);\n        }\n      },\n    );\n\n    const unsubscribe = () => {\n      onSnapshotSubscription.remove();\n      this._firestore.native.documentOffSnapshot(listenerId);\n    };\n\n    this._firestore.native.documentOnSnapshot(this.path, listenerId, snapshotListenOptions);\n\n    return unsubscribe;\n  }\n\n  set(data, options) {\n    if (!isObject(data)) {\n      throw new Error(\"firebase.firestore().doc().set(*) 'data' must be an object.\");\n    }\n\n    let setOptions;\n    try {\n      setOptions = parseSetOptions(options);\n    } catch (e) {\n      throw new Error(`firebase.firestore().doc().set(_, *) ${e.message}.`);\n    }\n\n    return this._firestore.native.documentSet(this.path, buildNativeMap(data), setOptions);\n  }\n\n  update(...args) {\n    if (args.length === 0) {\n      throw new Error(\n        'firebase.firestore().doc().update(*) expected at least 1 argument but was called with 0 arguments.',\n      );\n    }\n\n    let data;\n    try {\n      data = parseUpdateArgs(args);\n    } catch (e) {\n      throw new Error(`firebase.firestore().doc().update(*) ${e.message}`);\n    }\n\n    return this._firestore.native.documentUpdate(this.path, buildNativeMap(data));\n  }\n}\n\nprovideDocumentReferenceClass(FirestoreDocumentReference); // serialize\n"]},"metadata":{},"sourceType":"script"}