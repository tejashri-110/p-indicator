{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _common = require(\"@react-native-firebase/app/lib/common\");\n\nvar _FirestoreDocumentReference = _interopRequireDefault(require(\"./FirestoreDocumentReference\"));\n\nvar _FirestoreDocumentSnapshot = _interopRequireDefault(require(\"./FirestoreDocumentSnapshot\"));\n\nvar _utils = require(\"./utils\");\n\nvar _serialize = require(\"./utils/serialize\");\n\nvar FirestoreTransaction = function () {\n  function FirestoreTransaction(firestore, meta) {\n    (0, _classCallCheck2.default)(this, FirestoreTransaction);\n    this._firestore = firestore;\n    this._meta = meta;\n  }\n\n  (0, _createClass2.default)(FirestoreTransaction, [{\n    key: \"_prepare\",\n    value: function _prepare() {\n      this._calledGetCount = 0;\n      this._commandBuffer = [];\n      this._pendingResult = undefined;\n    }\n  }, {\n    key: \"get\",\n    value: function get(documentRef) {\n      var _this = this;\n\n      if (!(documentRef instanceof _FirestoreDocumentReference.default)) {\n        throw new Error(\"firebase.firestore().runTransaction() Transaction.get(*) 'documentRef' expected a DocumentReference.\");\n      }\n\n      this._calledGetCount++;\n      return this._firestore.native.transactionGetDocument(this._meta.id, documentRef.path).then(function (data) {\n        return new _FirestoreDocumentSnapshot.default(_this._firestore, data);\n      });\n    }\n  }, {\n    key: \"set\",\n    value: function set(documentRef, data, options) {\n      if (!(documentRef instanceof _FirestoreDocumentReference.default)) {\n        throw new Error(\"firebase.firestore().runTransaction() Transaction.set(*) 'documentRef' expected a DocumentReference.\");\n      }\n\n      if (!(0, _common.isObject)(data)) {\n        throw new Error(\"firebase.firestore().runTransaction() Transaction.set(_, *) 'data' must be an object..\");\n      }\n\n      var setOptions;\n\n      try {\n        setOptions = (0, _utils.parseSetOptions)(options);\n      } catch (e) {\n        throw new Error(\"firebase.firestore().runTransaction() Transaction.set(_, _, *) \" + e.message + \".\");\n      }\n\n      this._commandBuffer.push({\n        type: 'SET',\n        path: documentRef.path,\n        data: (0, _serialize.buildNativeMap)(data),\n        options: setOptions\n      });\n\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(documentRef) {\n      if (!(documentRef instanceof _FirestoreDocumentReference.default)) {\n        throw new Error(\"firebase.firestore().runTransaction() Transaction.update(*) 'documentRef' expected a DocumentReference.\");\n      }\n\n      var data;\n\n      try {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        data = (0, _utils.parseUpdateArgs)(args);\n      } catch (e) {\n        throw new Error(\"firebase.firestore().runTransaction() Transaction.update(_, *) \" + e.message);\n      }\n\n      this._commandBuffer.push({\n        type: 'UPDATE',\n        path: documentRef.path,\n        data: (0, _serialize.buildNativeMap)(data)\n      });\n\n      return this;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(documentRef) {\n      if (!(documentRef instanceof _FirestoreDocumentReference.default)) {\n        throw new Error(\"firebase.firestore().runTransaction() Transaction.delete(*) 'documentRef' expected a DocumentReference.\");\n      }\n\n      this._commandBuffer.push({\n        type: 'DELETE',\n        path: documentRef.path\n      });\n\n      return this;\n    }\n  }]);\n  return FirestoreTransaction;\n}();\n\nexports.default = FirestoreTransaction;","map":{"version":3,"sources":["C:/Users/mitba/React Native/p-indicator-1/node_modules/@react-native-firebase/firestore/lib/FirestoreTransaction.js"],"names":["FirestoreTransaction","firestore","meta","_firestore","_meta","_calledGetCount","_commandBuffer","_pendingResult","undefined","documentRef","FirestoreDocumentReference","Error","native","transactionGetDocument","id","path","then","data","FirestoreDocumentSnapshot","options","setOptions","e","message","push","type","args"],"mappings":";;;;;;;;;;;AAiBA;;AACA;;AACA;;AACA;;AACA;;IAEqBA,oB;AACnB,gCAAYC,SAAZ,EAAuBC,IAAvB,EAA6B;AAAA;AAC3B,SAAKC,UAAL,GAAkBF,SAAlB;AACA,SAAKG,KAAL,GAAaF,IAAb;AACD;;;;+BAQU;AACT,WAAKG,eAAL,GAAuB,CAAvB;AACA,WAAKC,cAAL,GAAsB,EAAtB;AACA,WAAKC,cAAL,GAAsBC,SAAtB;AACD;;;wBAKGC,W,EAAa;AAAA;;AACf,UAAI,EAAEA,WAAW,YAAYC,mCAAzB,CAAJ,EAA0D;AACxD,cAAM,IAAIC,KAAJ,CACJ,sGADI,CAAN;AAGD;;AAED,WAAKN,eAAL;AACA,aAAO,KAAKF,UAAL,CAAgBS,MAAhB,CACJC,sBADI,CACmB,KAAKT,KAAL,CAAWU,EAD9B,EACkCL,WAAW,CAACM,IAD9C,EAEJC,IAFI,CAEC,UAAAC,IAAI;AAAA,eAAI,IAAIC,kCAAJ,CAA8B,KAAI,CAACf,UAAnC,EAA+Cc,IAA/C,CAAJ;AAAA,OAFL,CAAP;AAGD;;;wBAOGR,W,EAAaQ,I,EAAME,O,EAAS;AAC9B,UAAI,EAAEV,WAAW,YAAYC,mCAAzB,CAAJ,EAA0D;AACxD,cAAM,IAAIC,KAAJ,CACJ,sGADI,CAAN;AAGD;;AAED,UAAI,CAAC,sBAASM,IAAT,CAAL,EAAqB;AACnB,cAAM,IAAIN,KAAJ,CACJ,wFADI,CAAN;AAGD;;AAED,UAAIS,UAAJ;;AACA,UAAI;AACFA,QAAAA,UAAU,GAAG,4BAAgBD,OAAhB,CAAb;AACD,OAFD,CAEE,OAAOE,CAAP,EAAU;AACV,cAAM,IAAIV,KAAJ,qEAC8DU,CAAC,CAACC,OADhE,OAAN;AAGD;;AAED,WAAKhB,cAAL,CAAoBiB,IAApB,CAAyB;AACvBC,QAAAA,IAAI,EAAE,KADiB;AAEvBT,QAAAA,IAAI,EAAEN,WAAW,CAACM,IAFK;AAGvBE,QAAAA,IAAI,EAAE,+BAAeA,IAAf,CAHiB;AAIvBE,QAAAA,OAAO,EAAEC;AAJc,OAAzB;;AAOA,aAAO,IAAP;AACD;;;2BAEMX,W,EAAsB;AAC3B,UAAI,EAAEA,WAAW,YAAYC,mCAAzB,CAAJ,EAA0D;AACxD,cAAM,IAAIC,KAAJ,CACJ,yGADI,CAAN;AAGD;;AAED,UAAIM,IAAJ;;AACA,UAAI;AAAA,0CARiBQ,IAQjB;AARiBA,UAAAA,IAQjB;AAAA;;AACFR,QAAAA,IAAI,GAAG,4BAAgBQ,IAAhB,CAAP;AACD,OAFD,CAEE,OAAOJ,CAAP,EAAU;AACV,cAAM,IAAIV,KAAJ,qEAC8DU,CAAC,CAACC,OADhE,CAAN;AAGD;;AAED,WAAKhB,cAAL,CAAoBiB,IAApB,CAAyB;AACvBC,QAAAA,IAAI,EAAE,QADiB;AAEvBT,QAAAA,IAAI,EAAEN,WAAW,CAACM,IAFK;AAGvBE,QAAAA,IAAI,EAAE,+BAAeA,IAAf;AAHiB,OAAzB;;AAMA,aAAO,IAAP;AACD;;;4BAEMR,W,EAAa;AAClB,UAAI,EAAEA,WAAW,YAAYC,mCAAzB,CAAJ,EAA0D;AACxD,cAAM,IAAIC,KAAJ,CACJ,yGADI,CAAN;AAGD;;AAED,WAAKL,cAAL,CAAoBiB,IAApB,CAAyB;AACvBC,QAAAA,IAAI,EAAE,QADiB;AAEvBT,QAAAA,IAAI,EAAEN,WAAW,CAACM;AAFK,OAAzB;;AAKA,aAAO,IAAP;AACD","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isObject } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport FirestoreDocumentSnapshot from './FirestoreDocumentSnapshot';\nimport { parseSetOptions, parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\n\nexport default class FirestoreTransaction {\n  constructor(firestore, meta) {\n    this._firestore = firestore;\n    this._meta = meta;\n  }\n\n  /**\n   * Clears the command buffer and any pending result in prep for\n   * the next transaction iteration attempt.\n   *\n   * @private\n   */\n  _prepare() {\n    this._calledGetCount = 0;\n    this._commandBuffer = [];\n    this._pendingResult = undefined;\n  }\n\n  /**\n   * Reads the document referenced by the provided DocumentReference.\n   */\n  get(documentRef) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.get(*) 'documentRef' expected a DocumentReference.\",\n      );\n    }\n\n    this._calledGetCount++;\n    return this._firestore.native\n      .transactionGetDocument(this._meta.id, documentRef.path)\n      .then(data => new FirestoreDocumentSnapshot(this._firestore, data));\n  }\n\n  /**\n   * Writes to the document referred to by the provided DocumentReference.\n   * If the document does not exist yet, it will be created. If you pass options,\n   * the provided data can be merged into the existing document.\n   */\n  set(documentRef, data, options) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.set(*) 'documentRef' expected a DocumentReference.\",\n      );\n    }\n\n    if (!isObject(data)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.set(_, *) 'data' must be an object..\",\n      );\n    }\n\n    let setOptions;\n    try {\n      setOptions = parseSetOptions(options);\n    } catch (e) {\n      throw new Error(\n        `firebase.firestore().runTransaction() Transaction.set(_, _, *) ${e.message}.`,\n      );\n    }\n\n    this._commandBuffer.push({\n      type: 'SET',\n      path: documentRef.path,\n      data: buildNativeMap(data),\n      options: setOptions,\n    });\n\n    return this;\n  }\n\n  update(documentRef, ...args) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.update(*) 'documentRef' expected a DocumentReference.\",\n      );\n    }\n\n    let data;\n    try {\n      data = parseUpdateArgs(args);\n    } catch (e) {\n      throw new Error(\n        `firebase.firestore().runTransaction() Transaction.update(_, *) ${e.message}`,\n      );\n    }\n\n    this._commandBuffer.push({\n      type: 'UPDATE',\n      path: documentRef.path,\n      data: buildNativeMap(data),\n    });\n\n    return this;\n  }\n\n  delete(documentRef) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.delete(*) 'documentRef' expected a DocumentReference.\",\n      );\n    }\n\n    this._commandBuffer.push({\n      type: 'DELETE',\n      path: documentRef.path,\n    });\n\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}