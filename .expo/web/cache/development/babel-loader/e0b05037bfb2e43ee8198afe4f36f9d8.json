{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _common = require(\"@react-native-firebase/app/lib/common\");\n\nvar MIN_SECONDS = -62135596800;\n\nvar FirestoreTimestamp = function () {\n  (0, _createClass2.default)(FirestoreTimestamp, null, [{\n    key: \"now\",\n    value: function now() {\n      return FirestoreTimestamp.fromMillis(Date.now());\n    }\n  }, {\n    key: \"fromDate\",\n    value: function fromDate(date) {\n      if (!(0, _common.isDate)(date)) {\n        throw new Error(\"firebase.firestore.Timestamp.fromDate(*) 'date' expected a valid Date object.\");\n      }\n\n      return FirestoreTimestamp.fromMillis(date.getTime());\n    }\n  }, {\n    key: \"fromMillis\",\n    value: function fromMillis(milliseconds) {\n      var seconds = Math.floor(milliseconds / 1000);\n      var nanoseconds = (milliseconds - seconds * 1000) * 1e6;\n      return new FirestoreTimestamp(seconds, nanoseconds);\n    }\n  }]);\n\n  function FirestoreTimestamp(seconds, nanoseconds) {\n    (0, _classCallCheck2.default)(this, FirestoreTimestamp);\n\n    if (!(0, _common.isNumber)(seconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'seconds' expected a number value.\");\n    }\n\n    if (!(0, _common.isNumber)(nanoseconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' expected a number value.\");\n    }\n\n    if (nanoseconds < 0) {\n      throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' out of range: \" + nanoseconds);\n    }\n\n    if (nanoseconds >= 1e9) {\n      throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' out of range: \" + nanoseconds);\n    }\n\n    if (seconds < MIN_SECONDS) {\n      throw new Error(\"firebase.firestore.Timestamp 'seconds' out of range: \" + seconds);\n    }\n\n    if (seconds >= 253402300800) {\n      throw new Error(\"firebase.firestore.Timestamp 'seconds' out of range: \" + seconds);\n    }\n\n    this._seconds = seconds;\n    this._nanoseconds = nanoseconds;\n  }\n\n  (0, _createClass2.default)(FirestoreTimestamp, [{\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreTimestamp)) {\n        throw Error(\"firebase.firestore.Timestamp.isEqual(*) 'other' expected an instance of Timestamp.\");\n      }\n\n      return other.seconds === this._seconds && other.nanoseconds === this._nanoseconds;\n    }\n  }, {\n    key: \"toDate\",\n    value: function toDate() {\n      return new Date(this.toMillis());\n    }\n  }, {\n    key: \"toMillis\",\n    value: function toMillis() {\n      return this._seconds * 1000 + this._nanoseconds / 1e6;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"FirestoreTimestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        seconds: this.seconds,\n        nanoseconds: this.nanoseconds\n      };\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      var adjustedSeconds = this.seconds - MIN_SECONDS;\n      var formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n      var formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n      return formattedSeconds + '.' + formattedNanoseconds;\n    }\n  }, {\n    key: \"seconds\",\n    get: function get() {\n      return this._seconds;\n    }\n  }, {\n    key: \"nanoseconds\",\n    get: function get() {\n      return this._nanoseconds;\n    }\n  }]);\n  return FirestoreTimestamp;\n}();\n\nexports.default = FirestoreTimestamp;","map":{"version":3,"sources":["C:/Users/mitba/React Native/p-indicator-1/node_modules/@react-native-firebase/firestore/lib/FirestoreTimestamp.js"],"names":["MIN_SECONDS","FirestoreTimestamp","fromMillis","Date","now","date","Error","getTime","milliseconds","seconds","Math","floor","nanoseconds","_seconds","_nanoseconds","other","toMillis","adjustedSeconds","formattedSeconds","String","padStart","formattedNanoseconds"],"mappings":";;;;;;;;;;;AAiBA;;AAGA,IAAMA,WAAW,GAAG,CAAC,WAArB;;IAEqBC,kB;;;0BACN;AACX,aAAOA,kBAAkB,CAACC,UAAnB,CAA8BC,IAAI,CAACC,GAAL,EAA9B,CAAP;AACD;;;6BAEeC,I,EAAM;AACpB,UAAI,CAAC,oBAAOA,IAAP,CAAL,EAAmB;AACjB,cAAM,IAAIC,KAAJ,CACJ,+EADI,CAAN;AAGD;;AAED,aAAOL,kBAAkB,CAACC,UAAnB,CAA8BG,IAAI,CAACE,OAAL,EAA9B,CAAP;AACD;;;+BAEiBC,Y,EAAc;AAC9B,UAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,YAAY,GAAG,IAA1B,CAAhB;AACA,UAAMI,WAAW,GAAG,CAACJ,YAAY,GAAGC,OAAO,GAAG,IAA1B,IAAkC,GAAtD;AACA,aAAO,IAAIR,kBAAJ,CAAuBQ,OAAvB,EAAgCG,WAAhC,CAAP;AACD;;;AAED,8BAAYH,OAAZ,EAAqBG,WAArB,EAAkC;AAAA;;AAChC,QAAI,CAAC,sBAASH,OAAT,CAAL,EAAwB;AACtB,YAAM,IAAIH,KAAJ,CAAU,iEAAV,CAAN;AACD;;AAED,QAAI,CAAC,sBAASM,WAAT,CAAL,EAA4B;AAC1B,YAAM,IAAIN,KAAJ,CAAU,qEAAV,CAAN;AACD;;AAED,QAAIM,WAAW,GAAG,CAAlB,EAAqB;AACnB,YAAM,IAAIN,KAAJ,+DAAsEM,WAAtE,CAAN;AACD;;AAED,QAAIA,WAAW,IAAI,GAAnB,EAAwB;AACtB,YAAM,IAAIN,KAAJ,+DAAsEM,WAAtE,CAAN;AACD;;AAGD,QAAIH,OAAO,GAAGT,WAAd,EAA2B;AACzB,YAAM,IAAIM,KAAJ,2DAAkEG,OAAlE,CAAN;AACD;;AAGD,QAAIA,OAAO,IAAI,YAAf,EAA6B;AAC3B,YAAM,IAAIH,KAAJ,2DAAkEG,OAAlE,CAAN;AACD;;AAED,SAAKI,QAAL,GAAgBJ,OAAhB;AACA,SAAKK,YAAL,GAAoBF,WAApB;AACD;;;;4BAUOG,K,EAAO;AACb,UAAI,EAAEA,KAAK,YAAYd,kBAAnB,CAAJ,EAA4C;AAC1C,cAAMK,KAAK,CACT,oFADS,CAAX;AAGD;;AAED,aAAOS,KAAK,CAACN,OAAN,KAAkB,KAAKI,QAAvB,IAAmCE,KAAK,CAACH,WAAN,KAAsB,KAAKE,YAArE;AACD;;;6BAEQ;AACP,aAAO,IAAIX,IAAJ,CAAS,KAAKa,QAAL,EAAT,CAAP;AACD;;;+BAEU;AACT,aAAO,KAAKH,QAAL,GAAgB,IAAhB,GAAuB,KAAKC,YAAL,GAAoB,GAAlD;AACD;;;+BAEU;AACT,6CAAqC,KAAKL,OAA1C,sBAAkE,KAAKG,WAAvE;AACD;;;6BAEQ;AACP,aAAO;AAAEH,QAAAA,OAAO,EAAE,KAAKA,OAAhB;AAAyBG,QAAAA,WAAW,EAAE,KAAKA;AAA3C,OAAP;AACD;;;8BAMS;AAOR,UAAMK,eAAe,GAAG,KAAKR,OAAL,GAAeT,WAAvC;AAEA,UAAMkB,gBAAgB,GAAGC,MAAM,CAACF,eAAD,CAAN,CAAwBG,QAAxB,CAAiC,EAAjC,EAAqC,GAArC,CAAzB;AACA,UAAMC,oBAAoB,GAAGF,MAAM,CAAC,KAAKP,WAAN,CAAN,CAAyBQ,QAAzB,CAAkC,CAAlC,EAAqC,GAArC,CAA7B;AACA,aAAOF,gBAAgB,GAAG,GAAnB,GAAyBG,oBAAhC;AACD;;;wBAlDa;AACZ,aAAO,KAAKR,QAAZ;AACD;;;wBAEiB;AAChB,aAAO,KAAKC,YAAZ;AACD","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isDate, isNumber } from '@react-native-firebase/app/lib/common';\n\n// The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).\nconst MIN_SECONDS = -62135596800;\n\nexport default class FirestoreTimestamp {\n  static now() {\n    return FirestoreTimestamp.fromMillis(Date.now());\n  }\n\n  static fromDate(date) {\n    if (!isDate(date)) {\n      throw new Error(\n        \"firebase.firestore.Timestamp.fromDate(*) 'date' expected a valid Date object.\",\n      );\n    }\n\n    return FirestoreTimestamp.fromMillis(date.getTime());\n  }\n\n  static fromMillis(milliseconds) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanoseconds = (milliseconds - seconds * 1000) * 1e6;\n    return new FirestoreTimestamp(seconds, nanoseconds);\n  }\n\n  constructor(seconds, nanoseconds) {\n    if (!isNumber(seconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'seconds' expected a number value.\");\n    }\n\n    if (!isNumber(nanoseconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' expected a number value.\");\n    }\n\n    if (nanoseconds < 0) {\n      throw new Error(`firebase.firestore.Timestamp 'nanoseconds' out of range: ${nanoseconds}`);\n    }\n\n    if (nanoseconds >= 1e9) {\n      throw new Error(`firebase.firestore.Timestamp 'nanoseconds' out of range: ${nanoseconds}`);\n    }\n\n    // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n    if (seconds < MIN_SECONDS) {\n      throw new Error(`firebase.firestore.Timestamp 'seconds' out of range: ${seconds}`);\n    }\n\n    // This will break in the year 10,000.\n    if (seconds >= 253402300800) {\n      throw new Error(`firebase.firestore.Timestamp 'seconds' out of range: ${seconds}`);\n    }\n\n    this._seconds = seconds;\n    this._nanoseconds = nanoseconds;\n  }\n\n  get seconds() {\n    return this._seconds;\n  }\n\n  get nanoseconds() {\n    return this._nanoseconds;\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreTimestamp)) {\n      throw Error(\n        \"firebase.firestore.Timestamp.isEqual(*) 'other' expected an instance of Timestamp.\",\n      );\n    }\n\n    return other.seconds === this._seconds && other.nanoseconds === this._nanoseconds;\n  }\n\n  toDate() {\n    return new Date(this.toMillis());\n  }\n\n  toMillis() {\n    return this._seconds * 1000 + this._nanoseconds / 1e6;\n  }\n\n  toString() {\n    return `FirestoreTimestamp(seconds=${this.seconds}, nanoseconds=${this.nanoseconds})`;\n  }\n\n  toJSON() {\n    return { seconds: this.seconds, nanoseconds: this.nanoseconds };\n  }\n\n  /**\n   * Converts this object to a primitive string, which allows Timestamp objects to be compared\n   * using the `>`, `<=`, `>=` and `>` operators.\n   */\n  valueOf() {\n    // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is\n    // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded\n    // with zeroes to be a consistent length. Strings with this format then have a lexiographical\n    // ordering that matches the expected ordering. The <seconds> translation is done to avoid\n    // having a leading negative sign (i.e. a leading '-' character) in its string representation,\n    // which would affect its lexiographical ordering.\n    const adjustedSeconds = this.seconds - MIN_SECONDS;\n    // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.\n    const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}